/**
 * Generated by orval v6.7.1 🍺
 * Do not edit manually.
 * Medusa Storefront API
 * OpenAPI spec version: 1.0.0
 */
import { rest } from "msw"
import { faker } from "@faker-js/faker"

export const getPostCustomersCustomerAddressesMock = () => ({
  customer: faker.helpers.randomize([{}, undefined]),
})

export const getPostCustomersMock = () => ({
  customer: faker.helpers.randomize([{}, undefined]),
})

export const getDeleteCustomersCustomerAddressesAddressMock = () => ({
  customer: faker.helpers.randomize([{}, undefined]),
})

export const getPostCustomersCustomerAddressesAddressMock = () => ({
  customer: faker.helpers.randomize([{}, undefined]),
})

export const getGetCustomersCustomerMock = () => ({
  customer: faker.helpers.randomize([{}, undefined]),
})

export const getPostCustomersCustomerMock = () => ({
  customer: faker.helpers.randomize([{}, undefined]),
})

export const getGetCustomersCustomerPaymentMethodsMock = () => ({
  payment_methods: faker.helpers.randomize([
    [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
      provider_id: faker.helpers.randomize([faker.random.word(), undefined]),
      data: faker.helpers.randomize([{}, undefined]),
    })),
    undefined,
  ]),
})

export const getGetCustomersCustomerOrdersMock = () => ({
  count: faker.helpers.randomize([faker.datatype.number(), undefined]),
  offset: faker.helpers.randomize([faker.datatype.number(), undefined]),
  limit: faker.helpers.randomize([faker.datatype.number(), undefined]),
  orders: faker.helpers.randomize([
    [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({})),
    undefined,
  ]),
})

export const getPostCustomersResetPasswordMock = () => ({
  customer: faker.helpers.randomize([{}, undefined]),
})

export const getCustomerMSW = () => [
  rest.post("*/customers/me/addresses", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getPostCustomersCustomerAddressesMock())
    )
  }),
  rest.post("*/customers", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getPostCustomersMock())
    )
  }),
  rest.delete("*/customers/me/addresses/:addressid", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getDeleteCustomersCustomerAddressesAddressMock())
    )
  }),
  rest.post("*/customers/me/addresses/:addressid", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getPostCustomersCustomerAddressesAddressMock())
    )
  }),
  rest.get("*/customers/me", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getGetCustomersCustomerMock())
    )
  }),
  rest.post("*/customers/me", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getPostCustomersCustomerMock())
    )
  }),
  rest.get("*/customers/me/payment-methods", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getGetCustomersCustomerPaymentMethodsMock())
    )
  }),
  rest.get("*/customers/me/orders", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getGetCustomersCustomerOrdersMock())
    )
  }),
  rest.post("*/customers/password-token", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"))
  }),
  rest.post("*/customers/reset-password", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getPostCustomersResetPasswordMock())
    )
  }),
]
