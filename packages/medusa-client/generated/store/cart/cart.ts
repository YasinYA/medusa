/**
 * Generated by orval v6.7.1 🍺
 * Do not edit manually.
 * Medusa Storefront API
 * OpenAPI spec version: 1.0.0
 */
import type {
  PostCartsCartShippingMethod200,
  PostCartsCartShippingMethodBody,
  PostCartsCartTaxes200OneOf,
  PostCartsCartComplete200,
  PostCart200,
  PostCartBody,
  PostCartsCartLineItems200,
  PostCartsCartLineItemsBody,
  PostCartsCartPaymentSessions200,
  DeleteCartsCartDiscountsDiscount200,
  DeleteCartsCartLineItemsItem200,
  PostCartsCartLineItemsItem200,
  PostCartsCartLineItemsItemBody,
  DeleteCartsCartPaymentSessionsSession200,
  PostCartsCartPaymentSessionUpdate200,
  PostCartsCartPaymentSessionUpdateBody,
  GetCartsCart200,
  PostCartsCartPaymentSessionsSession200,
  PostCartsCartPaymentSession200,
  PostCartsCartPaymentSessionBody,
  PostCartsCart200,
  PostCartsCartBody,
} from ".././model"
import { getClient } from "../../../src/custom-instance"

/**
 * Adds a Shipping Method to the Cart.
 * @summary Add a Shipping Method
 */
export const postCartsCartShippingMethod = (
  id: string,
  postCartsCartShippingMethodBody: PostCartsCartShippingMethodBody
) => {
  return getClient<PostCartsCartShippingMethod200>({
    url: `/carts/${id}/shipping-methods`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: postCartsCartShippingMethodBody,
  })
}
/**
 * Calculates taxes for a cart. Depending on the cart's region this may involve making 3rd party API calls to a Tax Provider service.
 * @summary Calculate Cart Taxes
 */
export const postCartsCartTaxes = (id: string) => {
  return getClient<PostCartsCartTaxes200OneOf>({
    url: `/carts/${id}/taxes`,
    method: "post",
  })
}
/**
 * Completes a cart. The following steps will be performed. Payment authorization is attempted and if more work is required, we simply return the cart for further updates. If payment is authorized and order is not yet created, we make sure to do so. The completion of a cart can be performed idempotently with a provided header `Idempotency-Key`. If not provided, we will generate one for the request.
 * @summary Complete a Cart
 */
export const postCartsCartComplete = (id: string) => {
  return getClient<PostCartsCartComplete200>({
    url: `/carts/${id}/complete`,
    method: "post",
  })
}
/**
 * Creates a Cart within the given region and with the initial items. If no `region_id` is provided the cart will be associated with the first Region available. If no items are provided the cart will be empty after creation. If a user is logged in the cart's customer id and email will be set.
 * @summary Create a Cart
 */
export const postCart = (postCartBody: PostCartBody) => {
  return getClient<PostCart200>({
    url: `/carts`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: postCartBody,
  })
}
/**
 * Generates a Line Item with a given Product Variant and adds it to the Cart
 * @summary Add a Line Item
 */
export const postCartsCartLineItems = (
  id: string,
  postCartsCartLineItemsBody: PostCartsCartLineItemsBody
) => {
  return getClient<PostCartsCartLineItems200>({
    url: `/carts/${id}/line-items`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: postCartsCartLineItemsBody,
  })
}
/**
 * Creates Payment Sessions for each of the available Payment Providers in the Cart's Region.
 * @summary Initialize Payment Sessions
 */
export const postCartsCartPaymentSessions = (id: string) => {
  return getClient<PostCartsCartPaymentSessions200>({
    url: `/carts/${id}/payment-sessions`,
    method: "post",
  })
}
/**
 * Removes a Discount from a Cart.
 * @summary Remove Discount from Cart
 */
export const deleteCartsCartDiscountsDiscount = (id: string, code: string) => {
  return getClient<DeleteCartsCartDiscountsDiscount200>({
    url: `/carts/${id}/discounts/${code}`,
    method: "delete",
  })
}
/**
 * Removes a Line Item from a Cart.
 * @summary Delete a Line Item
 */
export const deleteCartsCartLineItemsItem = (id: string, lineId: string) => {
  return getClient<DeleteCartsCartLineItemsItem200>({
    url: `/carts/${id}/line-items/${lineId}`,
    method: "delete",
  })
}
/**
 * Updates a Line Item if the desired quantity can be fulfilled.
 * @summary Update a Line Item
 */
export const postCartsCartLineItemsItem = (
  id: string,
  lineId: string,
  postCartsCartLineItemsItemBody: PostCartsCartLineItemsItemBody
) => {
  return getClient<PostCartsCartLineItemsItem200>({
    url: `/carts/${id}/line-items/${lineId}`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: postCartsCartLineItemsItemBody,
  })
}
/**
 * Deletes a Payment Session on a Cart. May be useful if a payment has failed.
 * @summary Delete a Payment Session
 */
export const deleteCartsCartPaymentSessionsSession = (
  id: string,
  providerId: string
) => {
  return getClient<DeleteCartsCartPaymentSessionsSession200>({
    url: `/carts/${id}/payment-sessions/${providerId}`,
    method: "delete",
  })
}
/**
 * Updates a Payment Session with additional data.
 * @summary Update a Payment Session
 */
export const postCartsCartPaymentSessionUpdate = (
  id: string,
  providerId: string,
  postCartsCartPaymentSessionUpdateBody: PostCartsCartPaymentSessionUpdateBody
) => {
  return getClient<PostCartsCartPaymentSessionUpdate200>({
    url: `/carts/${id}/payment-sessions/${providerId}`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: postCartsCartPaymentSessionUpdateBody,
  })
}
/**
 * Retrieves a Cart.
 * @summary Retrieve a Cart
 */
export const getCartsCart = (id: string) => {
  return getClient<GetCartsCart200>({ url: `/carts/${id}`, method: "get" })
}
/**
 * Refreshes a Payment Session to ensure that it is in sync with the Cart - this is usually not necessary.
 * @summary Refresh a Payment Session
 */
export const postCartsCartPaymentSessionsSession = (
  id: string,
  providerId: string
) => {
  return getClient<PostCartsCartPaymentSessionsSession200>({
    url: `/carts/${id}/payment-sessions/${providerId}/refresh`,
    method: "post",
  })
}
/**
 * Selects a Payment Session as the session intended to be used towards the completion of the Cart.
 * @summary Select a Payment Session
 */
export const postCartsCartPaymentSession = (
  id: string,
  postCartsCartPaymentSessionBody: PostCartsCartPaymentSessionBody
) => {
  return getClient<PostCartsCartPaymentSession200>({
    url: `/carts/${id}/payment-session`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: postCartsCartPaymentSessionBody,
  })
}
/**
 * Updates a Cart.
 * @summary Update a Cart"
 */
export const postCartsCart = (
  id: string,
  postCartsCartBody: PostCartsCartBody
) => {
  return getClient<PostCartsCart200>({
    url: `/store/carts/${id}`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: postCartsCartBody,
  })
}

// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (
  ...args: any
) => Promise<infer R>
  ? R
  : any

export type PostCartsCartShippingMethodResult = NonNullable<
  AsyncReturnType<typeof postCartsCartShippingMethod>
>
export type PostCartsCartTaxesResult = NonNullable<
  AsyncReturnType<typeof postCartsCartTaxes>
>
export type PostCartsCartCompleteResult = NonNullable<
  AsyncReturnType<typeof postCartsCartComplete>
>
export type PostCartResult = NonNullable<AsyncReturnType<typeof postCart>>
export type PostCartsCartLineItemsResult = NonNullable<
  AsyncReturnType<typeof postCartsCartLineItems>
>
export type PostCartsCartPaymentSessionsResult = NonNullable<
  AsyncReturnType<typeof postCartsCartPaymentSessions>
>
export type DeleteCartsCartDiscountsDiscountResult = NonNullable<
  AsyncReturnType<typeof deleteCartsCartDiscountsDiscount>
>
export type DeleteCartsCartLineItemsItemResult = NonNullable<
  AsyncReturnType<typeof deleteCartsCartLineItemsItem>
>
export type PostCartsCartLineItemsItemResult = NonNullable<
  AsyncReturnType<typeof postCartsCartLineItemsItem>
>
export type DeleteCartsCartPaymentSessionsSessionResult = NonNullable<
  AsyncReturnType<typeof deleteCartsCartPaymentSessionsSession>
>
export type PostCartsCartPaymentSessionUpdateResult = NonNullable<
  AsyncReturnType<typeof postCartsCartPaymentSessionUpdate>
>
export type GetCartsCartResult = NonNullable<
  AsyncReturnType<typeof getCartsCart>
>
export type PostCartsCartPaymentSessionsSessionResult = NonNullable<
  AsyncReturnType<typeof postCartsCartPaymentSessionsSession>
>
export type PostCartsCartPaymentSessionResult = NonNullable<
  AsyncReturnType<typeof postCartsCartPaymentSession>
>
export type PostCartsCartResult = NonNullable<
  AsyncReturnType<typeof postCartsCart>
>
