/**
 * Generated by orval v6.7.1 🍺
 * Do not edit manually.
 * Medusa Storefront API
 * OpenAPI spec version: 1.0.0
 */
import type {
  PostAuth200,
  PostAuthBody,
  GetAuth200,
  GetAuthEmail200,
} from ".././model"
import { getClient } from "../../../src/custom-instance"

/**
 * Logs a Customer in and authorizes them to view their details. Successful authentication will set a session cookie in the Customer's browser.
 * @summary Authenticate Customer
 */
export const postAuth = (postAuthBody: PostAuthBody) => {
  return getClient<PostAuth200>({
    url: `/auth`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: postAuthBody,
  })
}
/**
 * Destroys a Customer's authenticated session.
 * @summary Log out
 */
export const deleteAuth = () => {
  return getClient<void>({ url: `/auth`, method: "delete" })
}
/**
 * Gets the currently logged in Customer.
 * @summary Get Session
 */
export const getAuth = () => {
  return getClient<GetAuth200>({ url: `/auth`, method: "get" })
}
/**
 * Checks if a Customer with the given email has signed up.
 * @summary Check if email has account
 */
export const getAuthEmail = (email: string) => {
  return getClient<GetAuthEmail200>({ url: `/auth/${email}`, method: "get" })
}

// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (
  ...args: any
) => Promise<infer R>
  ? R
  : any

export type PostAuthResult = NonNullable<AsyncReturnType<typeof postAuth>>
export type DeleteAuthResult = NonNullable<AsyncReturnType<typeof deleteAuth>>
export type GetAuthResult = NonNullable<AsyncReturnType<typeof getAuth>>
export type GetAuthEmailResult = NonNullable<
  AsyncReturnType<typeof getAuthEmail>
>
