/**
 * Generated by orval v6.7.1 🍺
 * Do not edit manually.
 * Medusa Admin API
 * OpenAPI spec version: 1.0.0
 */
import type {
  PostProductsToCollectionBody,
  DeleteProductsFromCollectionBody,
  PostCollections200,
  PostCollectionsBody,
  GetCollections200,
  GetCollectionsParams,
  DeleteCollectionsCollection200,
  GetCollectionsCollection200,
  PostCollectionsCollection200,
  PostCollectionsCollectionBody,
} from ".././model"
import { getClient } from "../../../src/custom-instance"

/**
 * Updates products associated with a Product Collection
 * @summary Updates products associated with a Product Collection
 */
export const postProductsToCollection = (
  id: string,
  postProductsToCollectionBody: PostProductsToCollectionBody
) => {
  return getClient<void>({
    url: `/admin/collections/${id}/products/batch`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: postProductsToCollectionBody,
  })
}
/**
 * Removes products associated with a Product Collection
 * @summary Removes products associated with a Product Collection
 */
export const deleteProductsFromCollection = (
  id: string,
  deleteProductsFromCollectionBody: DeleteProductsFromCollectionBody
) => {
  return getClient<void>({
    url: `/admin/collections/${id}/products/batch`,
    method: "delete",
    headers: { "Content-Type": "application/json" },
    data: deleteProductsFromCollectionBody,
  })
}
/**
 * Creates a Product Collection.
 * @summary Create a Product Collection
 */
export const postCollections = (postCollectionsBody: PostCollectionsBody) => {
  return getClient<PostCollections200>({
    url: `/admin/collections`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: postCollectionsBody,
  })
}
/**
 * Retrieve a list of Product Collection.
 * @summary List Product Collections
 */
export const getCollections = (params?: GetCollectionsParams) => {
  return getClient<GetCollections200>({
    url: `/admin/collections`,
    method: "get",
    params,
  })
}
/**
 * Deletes a Product Collection.
 * @summary Delete a Product Collection
 */
export const deleteCollectionsCollection = (id: string) => {
  return getClient<DeleteCollectionsCollection200>({
    url: `/admin/collections/${id}`,
    method: "delete",
  })
}
/**
 * Retrieves a Product Collection.
 * @summary Retrieve a Product Collection
 */
export const getCollectionsCollection = (id: string) => {
  return getClient<GetCollectionsCollection200>({
    url: `/admin/collections/${id}`,
    method: "get",
  })
}
/**
 * Updates a Product Collection.
 * @summary Update a Product Collection
 */
export const postCollectionsCollection = (
  id: string,
  postCollectionsCollectionBody: PostCollectionsCollectionBody
) => {
  return getClient<PostCollectionsCollection200>({
    url: `/admin/collections/${id}`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: postCollectionsCollectionBody,
  })
}

// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (
  ...args: any
) => Promise<infer R>
  ? R
  : any

export type PostProductsToCollectionResult = NonNullable<
  AsyncReturnType<typeof postProductsToCollection>
>
export type DeleteProductsFromCollectionResult = NonNullable<
  AsyncReturnType<typeof deleteProductsFromCollection>
>
export type PostCollectionsResult = NonNullable<
  AsyncReturnType<typeof postCollections>
>
export type GetCollectionsResult = NonNullable<
  AsyncReturnType<typeof getCollections>
>
export type DeleteCollectionsCollectionResult = NonNullable<
  AsyncReturnType<typeof deleteCollectionsCollection>
>
export type GetCollectionsCollectionResult = NonNullable<
  AsyncReturnType<typeof getCollectionsCollection>
>
export type PostCollectionsCollectionResult = NonNullable<
  AsyncReturnType<typeof postCollectionsCollection>
>
