/**
 * Generated by orval v6.7.1 🍺
 * Do not edit manually.
 * Medusa Admin API
 * OpenAPI spec version: 1.0.0
 */
import { rest } from "msw"
import { faker } from "@faker-js/faker"

export const getGetPriceListsPriceListProductsMock = () => ({
  count: faker.helpers.randomize([faker.datatype.number(), undefined]),
  offset: faker.helpers.randomize([faker.datatype.number(), undefined]),
  limit: faker.helpers.randomize([faker.datatype.number(), undefined]),
  products: faker.helpers.randomize([
    [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({})),
    undefined,
  ]),
})

export const getPostProductsProductOptionsMock = () => ({
  product: faker.helpers.randomize([{}, undefined]),
})

export const getPostProductsMock = () => ({
  product: faker.helpers.randomize([{}, undefined]),
})

export const getGetProductsMock = () => ({
  count: faker.helpers.randomize([faker.datatype.number(), undefined]),
  offset: faker.helpers.randomize([faker.datatype.number(), undefined]),
  limit: faker.helpers.randomize([faker.datatype.number(), undefined]),
  products: faker.helpers.randomize([
    [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({})),
    undefined,
  ]),
})

export const getPostProductsProductVariantsMock = () => ({
  product: faker.helpers.randomize([{}, undefined]),
})

export const getGetProductsProductVariantsMock = () => ({
  variants: faker.helpers.randomize([
    [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({})),
    undefined,
  ]),
})

export const getDeleteProductsProductOptionsOptionMock = () => ({
  id: faker.helpers.randomize([faker.random.word(), undefined]),
  object: faker.helpers.randomize([faker.random.word(), undefined]),
  deleted: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  product: faker.helpers.randomize([{}, undefined]),
})

export const getPostProductsProductOptionsOptionMock = () => ({
  product: faker.helpers.randomize([{}, undefined]),
})

export const getDeleteProductsProductMock = () => ({
  id: faker.helpers.randomize([faker.random.word(), undefined]),
  object: faker.helpers.randomize([faker.random.word(), undefined]),
  deleted: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
})

export const getGetProductsProductMock = () => ({
  product: faker.helpers.randomize([{}, undefined]),
})

export const getPostProductsProductMock = () => ({
  product: faker.helpers.randomize([{}, undefined]),
})

export const getDeleteProductsProductVariantsVariantMock = () => ({
  id: faker.helpers.randomize([faker.random.word(), undefined]),
  object: faker.helpers.randomize([faker.random.word(), undefined]),
  deleted: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
})

export const getPostProductsProductVariantsVariantMock = () => ({
  product: faker.helpers.randomize([{}, undefined]),
})

export const getGetProductsTypesMock = () => ({
  types: faker.helpers.randomize([
    [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({})),
    undefined,
  ]),
})

export const getPostProductsProductMetadataMock = () => ({
  product: faker.helpers.randomize([{}, undefined]),
})

export const getProductMSW = () => [
  rest.get("*/admin/price-lists/:id/products", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getGetPriceListsPriceListProductsMock())
    )
  }),
  rest.post("*/admin/products/:id/options", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getPostProductsProductOptionsMock())
    )
  }),
  rest.post("*/admin/products", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getPostProductsMock())
    )
  }),
  rest.get("*/admin/products", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getGetProductsMock())
    )
  }),
  rest.post("*/admin/products/:id/variants", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getPostProductsProductVariantsMock())
    )
  }),
  rest.get("*/admin/products/:id/variants", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getGetProductsProductVariantsMock())
    )
  }),
  rest.delete("*/admin/products/:id/options/:optionid", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getDeleteProductsProductOptionsOptionMock())
    )
  }),
  rest.post("*/admin/products/:id/options/:optionid", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getPostProductsProductOptionsOptionMock())
    )
  }),
  rest.delete("*/admin/products/:id", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getDeleteProductsProductMock())
    )
  }),
  rest.get("*/admin/products/:id", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getGetProductsProductMock())
    )
  }),
  rest.post("*/admin/products/:id", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getPostProductsProductMock())
    )
  }),
  rest.delete("*/admin/products/:id/variants/:variantid", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getDeleteProductsProductVariantsVariantMock())
    )
  }),
  rest.post("*/admin/products/:id/variants/:variantid", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getPostProductsProductVariantsVariantMock())
    )
  }),
  rest.get("*/admin/products/types", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getGetProductsTypesMock())
    )
  }),
  rest.post("*/admin/products/:id/metadata", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getPostProductsProductMetadataMock())
    )
  }),
]
