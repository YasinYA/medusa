/**
 * Generated by orval v6.7.1 🍺
 * Do not edit manually.
 * Medusa Admin API
 * OpenAPI spec version: 1.0.0
 */
import { rest } from "msw"
import { faker } from "@faker-js/faker"

export const getPostOrdersOrderShippingMethodsMock = () => ({
  order: faker.helpers.randomize([{}, undefined]),
})

export const getPostOrdersOrderArchiveMock = () => ({
  order: faker.helpers.randomize([{}, undefined]),
})

export const getPostOrdersOrderCancelMock = () => ({
  order: faker.helpers.randomize([{}, undefined]),
})

export const getPostOrdersOrderCaptureMock = () => ({
  order: faker.helpers.randomize([{}, undefined]),
})

export const getPostOrdersOrderCompleteMock = () => ({
  order: faker.helpers.randomize([{}, undefined]),
})

export const getPostOrdersOrderClaimsClaimShipmentsMock = () => ({
  order: faker.helpers.randomize([{}, undefined]),
})

export const getPostOrdersOrderClaimsMock = () => ({
  order: faker.helpers.randomize([{}, undefined]),
})

export const getPostOrdersOrderFulfillmentsMock = () => ({
  order: faker.helpers.randomize([{}, undefined]),
})

export const getPostOrdersMock = () => ({
  order: faker.helpers.randomize([{}, undefined]),
})

export const getGetOrdersMock = () => ({
  orders: faker.helpers.randomize([
    [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({})),
    undefined,
  ]),
})

export const getPostOrdersOrderShipmentMock = () => ({
  order: faker.helpers.randomize([{}, undefined]),
})

export const getPostOrdersOrderSwapsSwapShipmentsMock = () => ({
  order: faker.helpers.randomize([{}, undefined]),
})

export const getPostOrdersOrderSwapsMock = () => ({
  order: faker.helpers.randomize([{}, undefined]),
})

export const getDeleteOrdersOrderMetadataKeyMock = () => ({
  order: faker.helpers.randomize([{}, undefined]),
})

export const getPostOrdersOrderClaimsClaimFulfillmentsMock = () => ({
  order: faker.helpers.randomize([{}, undefined]),
})

export const getPostOrdersOrderSwapsSwapFulfillmentsMock = () => ({
  order: faker.helpers.randomize([{}, undefined]),
})

export const getGetOrdersOrderMock = () => ({
  order: faker.helpers.randomize([{}, undefined]),
})

export const getPostOrdersOrderMock = () => ({
  order: faker.helpers.randomize([{}, undefined]),
})

export const getPostOrdersOrderSwapsSwapProcessPaymentMock = () => ({
  order: faker.helpers.randomize([{}, undefined]),
})

export const getPostOrdersOrderRefundsMock = () => ({
  order: faker.helpers.randomize([{}, undefined]),
})

export const getPostOrdersOrderReturnsMock = () => ({
  order: faker.helpers.randomize([{}, undefined]),
})

export const getPostOrdersOrderClaimsClaimMock = () => ({
  order: faker.helpers.randomize([{}, undefined]),
})

export const getGetTaxRatesMock = () => ({
  orders: faker.helpers.randomize([
    [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({})),
    undefined,
  ]),
})

export const getOrderMSW = () => [
  rest.post("*/admin/orders/:id/shipping-methods", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getPostOrdersOrderShippingMethodsMock())
    )
  }),
  rest.post("*/admin/orders/:id/archive", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getPostOrdersOrderArchiveMock())
    )
  }),
  rest.post("*/admin/orders/:id/cancel", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getPostOrdersOrderCancelMock())
    )
  }),
  rest.post("*/admin/orders/:id/capture", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getPostOrdersOrderCaptureMock())
    )
  }),
  rest.post("*/admin/orders/:id/complete", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getPostOrdersOrderCompleteMock())
    )
  }),
  rest.post(
    "*/admin/orders/:id/claims/:claimid/shipments",
    (_req, res, ctx) => {
      return res(
        ctx.delay(1000),
        ctx.status(200, "Mocked status"),
        ctx.json(getPostOrdersOrderClaimsClaimShipmentsMock())
      )
    }
  ),
  rest.post("*/admin/order/:id/claims", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getPostOrdersOrderClaimsMock())
    )
  }),
  rest.post("*/admin/orders/:id/fulfillments", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getPostOrdersOrderFulfillmentsMock())
    )
  }),
  rest.post("*/admin/orders", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getPostOrdersMock())
    )
  }),
  rest.get("*/admin/orders", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getGetOrdersMock())
    )
  }),
  rest.post("*/admin/orders/:id/shipment", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getPostOrdersOrderShipmentMock())
    )
  }),
  rest.post("*/admin/orders/:id/swaps/:swapid/shipments", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getPostOrdersOrderSwapsSwapShipmentsMock())
    )
  }),
  rest.post("*/admin/order/:id/swaps", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getPostOrdersOrderSwapsMock())
    )
  }),
  rest.delete("*/admin/order/:id/metadata/:key", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getDeleteOrdersOrderMetadataKeyMock())
    )
  }),
  rest.post(
    "*/admin/orders/:id/claims/:claimid/fulfillments",
    (_req, res, ctx) => {
      return res(
        ctx.delay(1000),
        ctx.status(200, "Mocked status"),
        ctx.json(getPostOrdersOrderClaimsClaimFulfillmentsMock())
      )
    }
  ),
  rest.post(
    "*/admin/orders/:id/swaps/:swapid/fulfillments",
    (_req, res, ctx) => {
      return res(
        ctx.delay(1000),
        ctx.status(200, "Mocked status"),
        ctx.json(getPostOrdersOrderSwapsSwapFulfillmentsMock())
      )
    }
  ),
  rest.get("*/admin/orders/:id", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getGetOrdersOrderMock())
    )
  }),
  rest.post("*/admin/orders/:id", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getPostOrdersOrderMock())
    )
  }),
  rest.post(
    "*/admin/orders/:id/swaps/:swapid/process-payment",
    (_req, res, ctx) => {
      return res(
        ctx.delay(1000),
        ctx.status(200, "Mocked status"),
        ctx.json(getPostOrdersOrderSwapsSwapProcessPaymentMock())
      )
    }
  ),
  rest.post("*/admin/orders/:id/refunds", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getPostOrdersOrderRefundsMock())
    )
  }),
  rest.post("*/admin/orders/:id/returns", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getPostOrdersOrderReturnsMock())
    )
  }),
  rest.post("*/admin/order/:id/claims/:claimid", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getPostOrdersOrderClaimsClaimMock())
    )
  }),
  rest.get("*/admin/tax-rates", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getGetTaxRatesMock())
    )
  }),
]
