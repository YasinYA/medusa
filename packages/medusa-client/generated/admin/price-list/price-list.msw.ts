/**
 * Generated by orval v6.7.1 🍺
 * Do not edit manually.
 * Medusa Admin API
 * OpenAPI spec version: 1.0.0
 */
import { rest } from "msw"
import { faker } from "@faker-js/faker"

export const getPostPriceListsPriceListPricesBatchMock = () => ({
  id: faker.helpers.randomize([faker.random.word(), undefined]),
  object: faker.helpers.randomize([faker.random.word(), undefined]),
  deleted: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
})

export const getDeletePriceListsPriceListPricesBatchMock = () => ({
  ids: faker.helpers.randomize([
    [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() =>
      faker.random.word()
    ),
    undefined,
  ]),
  object: faker.helpers.randomize([faker.random.word(), undefined]),
  deleted: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
})

export const getPostPriceListsPriceListMock = () => ({
  product: faker.helpers.randomize([{}, undefined]),
})

export const getDeletePriceListsPriceListMock = () => ({
  id: faker.helpers.randomize([faker.random.word(), undefined]),
  object: faker.helpers.randomize([faker.random.word(), undefined]),
  deleted: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
})

export const getGetPriceListsPriceListMock = () => ({
  price_list: faker.helpers.randomize([{}, undefined]),
})

export const getGetPriceListsMock = () => ({
  price_lists: faker.helpers.randomize([
    [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({})),
    undefined,
  ]),
  count: faker.helpers.randomize([faker.datatype.number(), undefined]),
  offset: faker.helpers.randomize([faker.datatype.number(), undefined]),
  limit: faker.helpers.randomize([faker.datatype.number(), undefined]),
})

export const getPostPriceListsPriceListPriceListMock = () => ({
  product: faker.helpers.randomize([{}, undefined]),
})

export const getPriceListMSW = () => [
  rest.post("*/admin/price-lists/:id/prices/batch", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getPostPriceListsPriceListPricesBatchMock())
    )
  }),
  rest.delete("*/admin/price-lists/:id/prices/batch", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getDeletePriceListsPriceListPricesBatchMock())
    )
  }),
  rest.post("*/admin/price_lists", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getPostPriceListsPriceListMock())
    )
  }),
  rest.delete("*/admin/price-lists/:id", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getDeletePriceListsPriceListMock())
    )
  }),
  rest.get("*/admin/price-lists/:id", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getGetPriceListsPriceListMock())
    )
  }),
  rest.get("*/admin/price-lists", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getGetPriceListsMock())
    )
  }),
  rest.post("*/admin/price_lists/:id", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getPostPriceListsPriceListPriceListMock())
    )
  }),
]
