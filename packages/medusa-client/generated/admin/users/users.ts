/**
 * Generated by orval v6.7.1 🍺
 * Do not edit manually.
 * Medusa Admin API
 * OpenAPI spec version: 1.0.0
 */
import type {
  PostUsers200,
  PostUsersBody,
  GetUsers200,
  DeleteUsersUser200,
  PostUsersUser200,
  PostUsersUserBody,
  GetUsersUser200,
  PostUsersUserPassword200,
  PostUsersUserPasswordBody,
} from ".././model"
import { getClient } from "../../../src/custom-instance"

/**
 * Creates a User
 * @summary Create a User
 */
export const postUsers = (postUsersBody: PostUsersBody) => {
  return getClient<PostUsers200>({
    url: `/admin/users`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: postUsersBody,
  })
}
/**
 * Retrieves all users.
 * @summary Retrieve all users
 */
export const getUsers = () => {
  return getClient<GetUsers200>({ url: `/admin/users`, method: "get" })
}
/**
 * Deletes a User
 * @summary Delete a User
 */
export const deleteUsersUser = (userId: string) => {
  return getClient<DeleteUsersUser200>({
    url: `/admin/users/${userId}`,
    method: "delete",
  })
}
/**
 * Updates a User
 * @summary Update a User
 */
export const postUsersUser = (
  userId: string,
  postUsersUserBody: PostUsersUserBody
) => {
  return getClient<PostUsersUser200>({
    url: `/admin/users/${userId}`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: postUsersUserBody,
  })
}
/**
 * Retrieves a User.
 * @summary Retrieve a User
 */
export const getUsersUser = (id: string) => {
  return getClient<GetUsersUser200>({
    url: `/admin/users/${id}`,
    method: "get",
  })
}
/**
 * Sets the password for a User given the correct token.
 * @summary Set the password for a User.
 */
export const postUsersUserPassword = (
  postUsersUserPasswordBody: PostUsersUserPasswordBody
) => {
  return getClient<PostUsersUserPassword200>({
    url: `/admin/users/password-token`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: postUsersUserPasswordBody,
  })
}

// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (
  ...args: any
) => Promise<infer R>
  ? R
  : any

export type PostUsersResult = NonNullable<AsyncReturnType<typeof postUsers>>
export type GetUsersResult = NonNullable<AsyncReturnType<typeof getUsers>>
export type DeleteUsersUserResult = NonNullable<
  AsyncReturnType<typeof deleteUsersUser>
>
export type PostUsersUserResult = NonNullable<
  AsyncReturnType<typeof postUsersUser>
>
export type GetUsersUserResult = NonNullable<
  AsyncReturnType<typeof getUsersUser>
>
export type PostUsersUserPasswordResult = NonNullable<
  AsyncReturnType<typeof postUsersUserPassword>
>
