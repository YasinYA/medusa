/**
 * Generated by orval v6.7.1 🍺
 * Do not edit manually.
 * Medusa Admin API
 * OpenAPI spec version: 1.0.0
 */
import { rest } from "msw"
import { faker } from "@faker-js/faker"

export const getPostStoreCurrenciesCodeMock = () => ({
  store: faker.helpers.randomize([{}, undefined]),
})

export const getDeleteStoreCurrenciesCodeMock = () => ({
  store: faker.helpers.randomize([{}, undefined]),
})

export const getGetStoreMock = () => ({
  store: faker.helpers.randomize([{}, undefined]),
})

export const getPostStoreMock = () => ({
  store: faker.helpers.randomize([{}, undefined]),
})

export const getGetStorePaymentProvidersMock = () => ({
  payment_providers: faker.helpers.randomize([
    [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({})),
    undefined,
  ]),
})

export const getGetStoreTaxProvidersMock = () => ({
  tax_providers: faker.helpers.randomize([
    [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({})),
    undefined,
  ]),
})

export const getStoreMSW = () => [
  rest.post("*/admin/store/currencies/:code", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getPostStoreCurrenciesCodeMock())
    )
  }),
  rest.delete("*/admin/store/currencies/:code", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getDeleteStoreCurrenciesCodeMock())
    )
  }),
  rest.get("*/admin/store", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getGetStoreMock())
    )
  }),
  rest.post("*/admin/store", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getPostStoreMock())
    )
  }),
  rest.get("*/admin/store/payment-providers", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getGetStorePaymentProvidersMock())
    )
  }),
  rest.get("*/admin/store/tax-providers", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getGetStoreTaxProvidersMock())
    )
  }),
]
