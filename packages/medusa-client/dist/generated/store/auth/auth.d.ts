/**
 * Generated by orval v6.7.1 🍺
 * Do not edit manually.
 * Medusa Storefront API
 * OpenAPI spec version: 1.0.0
 */
import type { PostAuth200, PostAuthBody, GetAuth200, GetAuthEmail200 } from '.././model';
/**
* Logs a Customer in and authorizes them to view their details. Successful authentication will set a session cookie in the Customer's browser.
* @summary Authenticate Customer
*/
export declare const postAuth: (postAuthBody: PostAuthBody) => Promise<PostAuth200>;
/**
* Destroys a Customer's authenticated session.
* @summary Log out
*/
export declare const deleteAuth: () => Promise<void>;
/**
* Gets the currently logged in Customer.
* @summary Get Session
*/
export declare const getAuth: () => Promise<GetAuth200>;
/**
* Checks if a Customer with the given email has signed up.
* @summary Check if email has account
*/
export declare const getAuthEmail: (email: string) => Promise<GetAuthEmail200>;
declare type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (...args: any) => Promise<infer R> ? R : any;
export declare type PostAuthResult = NonNullable<AsyncReturnType<typeof postAuth>>;
export declare type DeleteAuthResult = NonNullable<AsyncReturnType<typeof deleteAuth>>;
export declare type GetAuthResult = NonNullable<AsyncReturnType<typeof getAuth>>;
export declare type GetAuthEmailResult = NonNullable<AsyncReturnType<typeof getAuthEmail>>;
export {};
