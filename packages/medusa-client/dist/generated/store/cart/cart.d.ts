/**
 * Generated by orval v6.7.1 🍺
 * Do not edit manually.
 * Medusa Storefront API
 * OpenAPI spec version: 1.0.0
 */
import type { PostCartsCartShippingMethod200, PostCartsCartShippingMethodBody, PostCartsCartTaxes200OneOf, PostCartsCartComplete200, PostCart200, PostCartBody, PostCartsCartLineItems200, PostCartsCartLineItemsBody, PostCartsCartPaymentSessions200, DeleteCartsCartDiscountsDiscount200, DeleteCartsCartLineItemsItem200, PostCartsCartLineItemsItem200, PostCartsCartLineItemsItemBody, DeleteCartsCartPaymentSessionsSession200, PostCartsCartPaymentSessionUpdate200, PostCartsCartPaymentSessionUpdateBody, GetCartsCart200, PostCartsCartPaymentSessionsSession200, PostCartsCartPaymentSession200, PostCartsCartPaymentSessionBody, PostCartsCartPaymentMethodUpdate200, PostCartsCartPaymentMethodUpdateBody } from '.././model';
/**
* Adds a Shipping Method to the Cart.
* @summary Add a Shipping Method
*/
export declare const postCartsCartShippingMethod: (id: string, postCartsCartShippingMethodBody: PostCartsCartShippingMethodBody) => Promise<PostCartsCartShippingMethod200>;
/**
* Calculates taxes for a cart. Depending on the cart's region this may involve making 3rd party API calls to a Tax Provider service.
* @summary Calculate Cart Taxes
*/
export declare const postCartsCartTaxes: (id: string) => Promise<PostCartsCartTaxes200OneOf>;
/**
* Completes a cart. The following steps will be performed. Payment authorization is attempted and if more work is required, we simply return the cart for further updates. If payment is authorized and order is not yet created, we make sure to do so. The completion of a cart can be performed idempotently with a provided header `Idempotency-Key`. If not provided, we will generate one for the request.
* @summary Complete a Cart
*/
export declare const postCartsCartComplete: (id: string) => Promise<PostCartsCartComplete200>;
/**
* Creates a Cart within the given region and with the initial items. If no `region_id` is provided the cart will be associated with the first Region available. If no items are provided the cart will be empty after creation. If a user is logged in the cart's customer id and email will be set.
* @summary Create a Cart
*/
export declare const postCart: (postCartBody: PostCartBody) => Promise<PostCart200>;
/**
* Generates a Line Item with a given Product Variant and adds it to the Cart
* @summary Add a Line Item
*/
export declare const postCartsCartLineItems: (id: string, postCartsCartLineItemsBody: PostCartsCartLineItemsBody) => Promise<PostCartsCartLineItems200>;
/**
* Creates Payment Sessions for each of the available Payment Providers in the Cart's Region.
* @summary Initialize Payment Sessions
*/
export declare const postCartsCartPaymentSessions: (id: string) => Promise<PostCartsCartPaymentSessions200>;
/**
* Removes a Discount from a Cart.
* @summary Remove Discount from Cart
*/
export declare const deleteCartsCartDiscountsDiscount: (id: string, code: string) => Promise<DeleteCartsCartDiscountsDiscount200>;
/**
* Removes a Line Item from a Cart.
* @summary Delete a Line Item
*/
export declare const deleteCartsCartLineItemsItem: (id: string, lineId: string) => Promise<DeleteCartsCartLineItemsItem200>;
/**
* Updates a Line Item if the desired quantity can be fulfilled.
* @summary Update a Line Item
*/
export declare const postCartsCartLineItemsItem: (id: string, lineId: string, postCartsCartLineItemsItemBody: PostCartsCartLineItemsItemBody) => Promise<PostCartsCartLineItemsItem200>;
/**
* Deletes a Payment Session on a Cart. May be useful if a payment has failed.
* @summary Delete a Payment Session
*/
export declare const deleteCartsCartPaymentSessionsSession: (id: string, providerId: string) => Promise<DeleteCartsCartPaymentSessionsSession200>;
/**
* Updates a Payment Session with additional data.
* @summary Update a Payment Session
*/
export declare const postCartsCartPaymentSessionUpdate: (id: string, providerId: string, postCartsCartPaymentSessionUpdateBody: PostCartsCartPaymentSessionUpdateBody) => Promise<PostCartsCartPaymentSessionUpdate200>;
/**
* Retrieves a Cart.
* @summary Retrieve a Cart
*/
export declare const getCartsCart: (id: string) => Promise<GetCartsCart200>;
/**
* Refreshes a Payment Session to ensure that it is in sync with the Cart - this is usually not necessary.
* @summary Refresh a Payment Session
*/
export declare const postCartsCartPaymentSessionsSession: (id: string, providerId: string) => Promise<PostCartsCartPaymentSessionsSession200>;
/**
* Selects a Payment Session as the session intended to be used towards the completion of the Cart.
* @summary Select a Payment Session
*/
export declare const postCartsCartPaymentSession: (id: string, postCartsCartPaymentSessionBody: PostCartsCartPaymentSessionBody) => Promise<PostCartsCartPaymentSession200>;
/**
* Updates a Cart.
* @summary Update a Cart"
*/
export declare const postCartsCartPaymentMethodUpdate: (id: string, postCartsCartPaymentMethodUpdateBody: PostCartsCartPaymentMethodUpdateBody) => Promise<PostCartsCartPaymentMethodUpdate200>;
declare type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (...args: any) => Promise<infer R> ? R : any;
export declare type PostCartsCartShippingMethodResult = NonNullable<AsyncReturnType<typeof postCartsCartShippingMethod>>;
export declare type PostCartsCartTaxesResult = NonNullable<AsyncReturnType<typeof postCartsCartTaxes>>;
export declare type PostCartsCartCompleteResult = NonNullable<AsyncReturnType<typeof postCartsCartComplete>>;
export declare type PostCartResult = NonNullable<AsyncReturnType<typeof postCart>>;
export declare type PostCartsCartLineItemsResult = NonNullable<AsyncReturnType<typeof postCartsCartLineItems>>;
export declare type PostCartsCartPaymentSessionsResult = NonNullable<AsyncReturnType<typeof postCartsCartPaymentSessions>>;
export declare type DeleteCartsCartDiscountsDiscountResult = NonNullable<AsyncReturnType<typeof deleteCartsCartDiscountsDiscount>>;
export declare type DeleteCartsCartLineItemsItemResult = NonNullable<AsyncReturnType<typeof deleteCartsCartLineItemsItem>>;
export declare type PostCartsCartLineItemsItemResult = NonNullable<AsyncReturnType<typeof postCartsCartLineItemsItem>>;
export declare type DeleteCartsCartPaymentSessionsSessionResult = NonNullable<AsyncReturnType<typeof deleteCartsCartPaymentSessionsSession>>;
export declare type PostCartsCartPaymentSessionUpdateResult = NonNullable<AsyncReturnType<typeof postCartsCartPaymentSessionUpdate>>;
export declare type GetCartsCartResult = NonNullable<AsyncReturnType<typeof getCartsCart>>;
export declare type PostCartsCartPaymentSessionsSessionResult = NonNullable<AsyncReturnType<typeof postCartsCartPaymentSessionsSession>>;
export declare type PostCartsCartPaymentSessionResult = NonNullable<AsyncReturnType<typeof postCartsCartPaymentSession>>;
export declare type PostCartsCartPaymentMethodUpdateResult = NonNullable<AsyncReturnType<typeof postCartsCartPaymentMethodUpdate>>;
export {};
