/**
 * Generated by orval v6.7.1 🍺
 * Do not edit manually.
 * Medusa Admin API
 * OpenAPI spec version: 1.0.0
 */
import type { PostOrdersOrderShippingMethods200, PostOrdersOrderShippingMethodsBody, PostOrdersOrderArchive200, PostOrdersOrderCancel200, PostOrdersOrderCapture200, PostOrdersOrderComplete200, PostOrdersOrderClaimsClaimShipments200, PostOrdersOrderClaimsClaimShipmentsBody, PostOrdersOrderClaims200, PostOrdersOrderClaimsBody, PostOrdersOrderFulfillments200, PostOrdersOrderFulfillmentsBody, PostOrders200, PostOrdersBody, GetOrders200, GetOrdersParams, PostOrdersOrderShipment200, PostOrdersOrderShipmentBody, PostOrdersOrderSwapsSwapShipments200, PostOrdersOrderSwapsSwapShipmentsBody, PostOrdersOrderSwaps200, PostOrdersOrderSwapsBody, DeleteOrdersOrderMetadataKey200, PostOrdersOrderClaimsClaimFulfillments200, PostOrdersOrderClaimsClaimFulfillmentsBody, PostOrdersOrderSwapsSwapFulfillments200, PostOrdersOrderSwapsSwapFulfillmentsBody, GetOrdersOrder200, PostOrdersOrder200, PostOrdersOrderBody, PostOrdersOrderSwapsSwapProcessPayment200, PostOrdersOrderRefunds200, PostOrdersOrderRefundsBody, PostOrdersOrderReturns200, PostOrdersOrderReturnsBody, PostOrdersOrderClaimsClaim200, PostOrdersOrderClaimsClaimBody, GetTaxRates200, GetTaxRatesParams } from '.././model';
/**
* Adds a Shipping Method to an Order. If another Shipping Method exists with the same Shipping Profile, the previous Shipping Method will be replaced.
* @summary Add a Shipping Method
*/
export declare const postOrdersOrderShippingMethods: (id: string, postOrdersOrderShippingMethodsBody: PostOrdersOrderShippingMethodsBody) => Promise<PostOrdersOrderShippingMethods200>;
/**
* Archives the order with the given id.
* @summary Archive order
*/
export declare const postOrdersOrderArchive: (id: string) => Promise<PostOrdersOrderArchive200>;
/**
* Registers an Order as canceled. This triggers a flow that will cancel any created Fulfillments and Payments, may fail if the Payment or Fulfillment Provider is unable to cancel the Payment/Fulfillment.
* @summary Cancel an Order
*/
export declare const postOrdersOrderCancel: (id: string) => Promise<PostOrdersOrderCancel200>;
/**
* Captures all the Payments associated with an Order.
* @summary Capture an Order
*/
export declare const postOrdersOrderCapture: (id: string) => Promise<PostOrdersOrderCapture200>;
/**
* Completes an Order
* @summary Complete an Order
*/
export declare const postOrdersOrderComplete: (id: string) => Promise<PostOrdersOrderComplete200>;
/**
* Registers a Claim Fulfillment as shipped.
* @summary Create Claim Shipment
*/
export declare const postOrdersOrderClaimsClaimShipments: (id: string, claimId: string, postOrdersOrderClaimsClaimShipmentsBody: PostOrdersOrderClaimsClaimShipmentsBody) => Promise<PostOrdersOrderClaimsClaimShipments200>;
/**
* Creates a Claim.
* @summary Create a Claim
*/
export declare const postOrdersOrderClaims: (id: string, postOrdersOrderClaimsBody: PostOrdersOrderClaimsBody) => Promise<PostOrdersOrderClaims200>;
/**
* Creates a Fulfillment of an Order - will notify Fulfillment Providers to prepare a shipment.
* @summary Create a Fulfillment
*/
export declare const postOrdersOrderFulfillments: (id: string, postOrdersOrderFulfillmentsBody: PostOrdersOrderFulfillmentsBody) => Promise<PostOrdersOrderFulfillments200>;
/**
* Creates and order
* @summary Create an order
*/
export declare const postOrders: (postOrdersBody: PostOrdersBody) => Promise<PostOrders200>;
/**
* Retrieves a list of Orders
* @summary List Orders
*/
export declare const getOrders: (params?: GetOrdersParams | undefined) => Promise<GetOrders200>;
/**
* Registers a Fulfillment as shipped.
* @summary Create a Shipment
*/
export declare const postOrdersOrderShipment: (id: string, postOrdersOrderShipmentBody: PostOrdersOrderShipmentBody) => Promise<PostOrdersOrderShipment200>;
/**
* Registers a Swap Fulfillment as shipped.
* @summary Create Swap Shipment
*/
export declare const postOrdersOrderSwapsSwapShipments: (id: string, swapId: string, postOrdersOrderSwapsSwapShipmentsBody: PostOrdersOrderSwapsSwapShipmentsBody) => Promise<PostOrdersOrderSwapsSwapShipments200>;
/**
* Creates a Swap. Swaps are used to handle Return of previously purchased goods and Fulfillment of replacements simultaneously.
* @summary Create a Swap
*/
export declare const postOrdersOrderSwaps: (id: string, postOrdersOrderSwapsBody: PostOrdersOrderSwapsBody) => Promise<PostOrdersOrderSwaps200>;
/**
* Deletes a metadata key.
* @summary Delete Metadata
*/
export declare const deleteOrdersOrderMetadataKey: (id: string, key: string) => Promise<DeleteOrdersOrderMetadataKey200>;
/**
* Creates a Fulfillment for a Claim.
* @summary Create a Claim Fulfillment
*/
export declare const postOrdersOrderClaimsClaimFulfillments: (id: string, claimId: string, postOrdersOrderClaimsClaimFulfillmentsBody: PostOrdersOrderClaimsClaimFulfillmentsBody) => Promise<PostOrdersOrderClaimsClaimFulfillments200>;
/**
* Creates a Fulfillment for a Swap.
* @summary Create a Swap Fulfillment
*/
export declare const postOrdersOrderSwapsSwapFulfillments: (id: string, swapId: string, postOrdersOrderSwapsSwapFulfillmentsBody: PostOrdersOrderSwapsSwapFulfillmentsBody) => Promise<PostOrdersOrderSwapsSwapFulfillments200>;
/**
* Retrieves an Order
* @summary Retrieve an Order
*/
export declare const getOrdersOrder: (id: string) => Promise<GetOrdersOrder200>;
/**
* Updates and order
* @summary Update an order
*/
export declare const postOrdersOrder: (id: string, postOrdersOrderBody: PostOrdersOrderBody) => Promise<PostOrdersOrder200>;
/**
* When there are differences between the returned and shipped Products in a Swap, the difference must be processed. Either a Refund will be issued or a Payment will be captured.
* @summary Process a Swap difference
*/
export declare const postOrdersOrderSwapsSwapProcessPayment: (id: string, swapId: string) => Promise<PostOrdersOrderSwapsSwapProcessPayment200>;
/**
* Issues a Refund.
* @summary Create a Refund
*/
export declare const postOrdersOrderRefunds: (id: string, postOrdersOrderRefundsBody: PostOrdersOrderRefundsBody) => Promise<PostOrdersOrderRefunds200>;
/**
* Requests a Return. If applicable a return label will be created and other plugins notified.
* @summary Request a Return
*/
export declare const postOrdersOrderReturns: (id: string, postOrdersOrderReturnsBody: PostOrdersOrderReturnsBody) => Promise<PostOrdersOrderReturns200>;
/**
* Updates a Claim.
* @summary Update a Claim
*/
export declare const postOrdersOrderClaimsClaim: (id: string, claimId: string, postOrdersOrderClaimsClaimBody: PostOrdersOrderClaimsClaimBody) => Promise<PostOrdersOrderClaimsClaim200>;
/**
* Retrieves a list of TaxRates
* @summary List Tax Rates
*/
export declare const getTaxRates: (params?: GetTaxRatesParams | undefined) => Promise<GetTaxRates200>;
declare type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (...args: any) => Promise<infer R> ? R : any;
export declare type PostOrdersOrderShippingMethodsResult = NonNullable<AsyncReturnType<typeof postOrdersOrderShippingMethods>>;
export declare type PostOrdersOrderArchiveResult = NonNullable<AsyncReturnType<typeof postOrdersOrderArchive>>;
export declare type PostOrdersOrderCancelResult = NonNullable<AsyncReturnType<typeof postOrdersOrderCancel>>;
export declare type PostOrdersOrderCaptureResult = NonNullable<AsyncReturnType<typeof postOrdersOrderCapture>>;
export declare type PostOrdersOrderCompleteResult = NonNullable<AsyncReturnType<typeof postOrdersOrderComplete>>;
export declare type PostOrdersOrderClaimsClaimShipmentsResult = NonNullable<AsyncReturnType<typeof postOrdersOrderClaimsClaimShipments>>;
export declare type PostOrdersOrderClaimsResult = NonNullable<AsyncReturnType<typeof postOrdersOrderClaims>>;
export declare type PostOrdersOrderFulfillmentsResult = NonNullable<AsyncReturnType<typeof postOrdersOrderFulfillments>>;
export declare type PostOrdersResult = NonNullable<AsyncReturnType<typeof postOrders>>;
export declare type GetOrdersResult = NonNullable<AsyncReturnType<typeof getOrders>>;
export declare type PostOrdersOrderShipmentResult = NonNullable<AsyncReturnType<typeof postOrdersOrderShipment>>;
export declare type PostOrdersOrderSwapsSwapShipmentsResult = NonNullable<AsyncReturnType<typeof postOrdersOrderSwapsSwapShipments>>;
export declare type PostOrdersOrderSwapsResult = NonNullable<AsyncReturnType<typeof postOrdersOrderSwaps>>;
export declare type DeleteOrdersOrderMetadataKeyResult = NonNullable<AsyncReturnType<typeof deleteOrdersOrderMetadataKey>>;
export declare type PostOrdersOrderClaimsClaimFulfillmentsResult = NonNullable<AsyncReturnType<typeof postOrdersOrderClaimsClaimFulfillments>>;
export declare type PostOrdersOrderSwapsSwapFulfillmentsResult = NonNullable<AsyncReturnType<typeof postOrdersOrderSwapsSwapFulfillments>>;
export declare type GetOrdersOrderResult = NonNullable<AsyncReturnType<typeof getOrdersOrder>>;
export declare type PostOrdersOrderResult = NonNullable<AsyncReturnType<typeof postOrdersOrder>>;
export declare type PostOrdersOrderSwapsSwapProcessPaymentResult = NonNullable<AsyncReturnType<typeof postOrdersOrderSwapsSwapProcessPayment>>;
export declare type PostOrdersOrderRefundsResult = NonNullable<AsyncReturnType<typeof postOrdersOrderRefunds>>;
export declare type PostOrdersOrderReturnsResult = NonNullable<AsyncReturnType<typeof postOrdersOrderReturns>>;
export declare type PostOrdersOrderClaimsClaimResult = NonNullable<AsyncReturnType<typeof postOrdersOrderClaimsClaim>>;
export declare type GetTaxRatesResult = NonNullable<AsyncReturnType<typeof getTaxRates>>;
export {};
