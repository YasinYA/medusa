/**
 * Generated by orval v6.7.1 🍺
 * Do not edit manually.
 * Medusa Admin API
 * OpenAPI spec version: 1.0.0
 */
import type { PostUsers200, PostUsersBody, GetUsers200, DeleteUsersUser200, PostUsersUser200, PostUsersUserBody, GetUsersUser200, PostUsersUserPassword200, PostUsersUserPasswordBody } from '.././model';
/**
* Creates a User
* @summary Create a User
*/
export declare const postUsers: (postUsersBody: PostUsersBody) => Promise<PostUsers200>;
/**
* Retrieves all users.
* @summary Retrieve all users
*/
export declare const getUsers: () => Promise<GetUsers200>;
/**
* Deletes a User
* @summary Delete a User
*/
export declare const deleteUsersUser: (userId: string) => Promise<DeleteUsersUser200>;
/**
* Updates a User
* @summary Update a User
*/
export declare const postUsersUser: (userId: string, postUsersUserBody: PostUsersUserBody) => Promise<PostUsersUser200>;
/**
* Retrieves a User.
* @summary Retrieve a User
*/
export declare const getUsersUser: (id: string) => Promise<GetUsersUser200>;
/**
* Sets the password for a User given the correct token.
* @summary Set the password for a User.
*/
export declare const postUsersUserPassword: (postUsersUserPasswordBody: PostUsersUserPasswordBody) => Promise<PostUsersUserPassword200>;
declare type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (...args: any) => Promise<infer R> ? R : any;
export declare type PostUsersResult = NonNullable<AsyncReturnType<typeof postUsers>>;
export declare type GetUsersResult = NonNullable<AsyncReturnType<typeof getUsers>>;
export declare type DeleteUsersUserResult = NonNullable<AsyncReturnType<typeof deleteUsersUser>>;
export declare type PostUsersUserResult = NonNullable<AsyncReturnType<typeof postUsersUser>>;
export declare type GetUsersUserResult = NonNullable<AsyncReturnType<typeof getUsersUser>>;
export declare type PostUsersUserPasswordResult = NonNullable<AsyncReturnType<typeof postUsersUserPassword>>;
export {};
