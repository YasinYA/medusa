/**
 * Generated by orval v6.7.1 🍺
 * Do not edit manually.
 * Medusa Admin API
 * OpenAPI spec version: 1.0.0
 */
import type { PostProductsProductOptions200, PostProductsProductOptionsBody, PostProducts200, PostProductsBody, GetProducts200, GetProductsParams, PostProductsProductVariants200, PostProductsProductVariantsBody, GetProductsProductVariants200, DeleteProductsProductOptionsOption200, PostProductsProductOptionsOption200, PostProductsProductOptionsOptionBody, DeleteProductsProduct200, GetProductsProduct200, PostProductsProduct200, PostProductsProductBody, DeleteProductsProductVariantsVariant200, PostProductsProductVariantsVariant200, PostProductsProductVariantsVariantBody, GetProductsTypes200, PostProductsProductMetadata200, PostProductsProductMetadataBody } from '.././model';
/**
* Adds a Product Option to a Product
* @summary Add an Option
*/
export declare const postProductsProductOptions: (id: string, postProductsProductOptionsBody: PostProductsProductOptionsBody) => Promise<PostProductsProductOptions200>;
/**
* Creates a Product
* @summary Create a Product
*/
export declare const postProducts: (postProductsBody: PostProductsBody) => Promise<PostProducts200>;
/**
* Retrieves a list of Product
* @summary List Product
*/
export declare const getProducts: (params?: GetProductsParams | undefined) => Promise<GetProducts200>;
/**
* Creates a Product Variant. Each Product Variant must have a unique combination of Product Option Values.
* @summary Create a Product Variant
*/
export declare const postProductsProductVariants: (id: string, postProductsProductVariantsBody: PostProductsProductVariantsBody) => Promise<PostProductsProductVariants200>;
/**
* Retrieves a list of the Product Variants associated with a Product.
* @summary List a Product's Product Variants
*/
export declare const getProductsProductVariants: (id: string) => Promise<GetProductsProductVariants200>;
/**
* Deletes a Product Option. Before a Product Option can be deleted all Option Values for the Product Option must be the same. You may, for example, have to delete some of your variants prior to deleting the Product Option
* @summary Delete a Product Option
*/
export declare const deleteProductsProductOptionsOption: (id: string, optionId: string) => Promise<DeleteProductsProductOptionsOption200>;
/**
* Updates a Product Option
* @summary Update a Product Option.
*/
export declare const postProductsProductOptionsOption: (id: string, optionId: string, postProductsProductOptionsOptionBody: PostProductsProductOptionsOptionBody) => Promise<PostProductsProductOptionsOption200>;
/**
* Deletes a Product and it's associated Product Variants.
* @summary Delete a Product
*/
export declare const deleteProductsProduct: (id: string) => Promise<DeleteProductsProduct200>;
/**
* Retrieves a Product.
* @summary Retrieve a Product
*/
export declare const getProductsProduct: (id: string) => Promise<GetProductsProduct200>;
/**
* Updates a Product
* @summary Update a Product
*/
export declare const postProductsProduct: (id: string, postProductsProductBody: PostProductsProductBody) => Promise<PostProductsProduct200>;
/**
* Deletes a Product Variant.
* @summary Delete a Product Variant
*/
export declare const deleteProductsProductVariantsVariant: (id: string, variantId: string) => Promise<DeleteProductsProductVariantsVariant200>;
/**
* Update a Product Variant.
* @summary Update a Product Variant
*/
export declare const postProductsProductVariantsVariant: (id: string, variantId: string, postProductsProductVariantsVariantBody: PostProductsProductVariantsVariantBody) => Promise<PostProductsProductVariantsVariant200>;
/**
* Retrieves a list of Product Types.
* @summary List Product Types
*/
export declare const getProductsTypes: () => Promise<GetProductsTypes200>;
/**
* Set metadata key/value pair for Product
* @summary Set Product metadata
*/
export declare const postProductsProductMetadata: (id: string, postProductsProductMetadataBody: PostProductsProductMetadataBody) => Promise<PostProductsProductMetadata200>;
declare type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (...args: any) => Promise<infer R> ? R : any;
export declare type PostProductsProductOptionsResult = NonNullable<AsyncReturnType<typeof postProductsProductOptions>>;
export declare type PostProductsResult = NonNullable<AsyncReturnType<typeof postProducts>>;
export declare type GetProductsResult = NonNullable<AsyncReturnType<typeof getProducts>>;
export declare type PostProductsProductVariantsResult = NonNullable<AsyncReturnType<typeof postProductsProductVariants>>;
export declare type GetProductsProductVariantsResult = NonNullable<AsyncReturnType<typeof getProductsProductVariants>>;
export declare type DeleteProductsProductOptionsOptionResult = NonNullable<AsyncReturnType<typeof deleteProductsProductOptionsOption>>;
export declare type PostProductsProductOptionsOptionResult = NonNullable<AsyncReturnType<typeof postProductsProductOptionsOption>>;
export declare type DeleteProductsProductResult = NonNullable<AsyncReturnType<typeof deleteProductsProduct>>;
export declare type GetProductsProductResult = NonNullable<AsyncReturnType<typeof getProductsProduct>>;
export declare type PostProductsProductResult = NonNullable<AsyncReturnType<typeof postProductsProduct>>;
export declare type DeleteProductsProductVariantsVariantResult = NonNullable<AsyncReturnType<typeof deleteProductsProductVariantsVariant>>;
export declare type PostProductsProductVariantsVariantResult = NonNullable<AsyncReturnType<typeof postProductsProductVariantsVariant>>;
export declare type GetProductsTypesResult = NonNullable<AsyncReturnType<typeof getProductsTypes>>;
export declare type PostProductsProductMetadataResult = NonNullable<AsyncReturnType<typeof postProductsProductMetadata>>;
export {};
