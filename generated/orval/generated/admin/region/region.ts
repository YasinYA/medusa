/**
 * Generated by orval v6.7.1 🍺
 * Do not edit manually.
 * Medusa Admin API
 * OpenAPI spec version: 1.0.0
 */
import type {
  PostRegionsRegionCountries200,
  PostRegionsRegionCountriesBody,
  PostRegionsRegionFulfillmentProviders200,
  PostRegionsRegionFulfillmentProvidersBody,
  PostRegionsRegionPaymentProviders200,
  PostRegionsRegionPaymentProvidersBody,
  PostRegions200,
  PostRegionsBody,
  GetRegions200,
  GetRegionsParams,
  DeleteRegionsRegionMetadataKey200,
  DeleteRegionsRegion200,
  GetRegionsRegion200,
  PostRegionsRegion200,
  PostRegionsRegionBody,
  GetRegionsRegionFulfillmentOptions200,
  PostRegionsRegionCountriesCountry200,
  PostRegionsRegionFulfillmentProvidersProvider200,
  PostRegionsRegionPaymentProvidersProvider200,
  PostRegionsRegionMetadata200,
  PostRegionsRegionMetadataBody
} from '.././model'
import { customInstance } from '../../../src/custom-instance'


  /**
 * Adds a Country to the list of Countries in a Region
 * @summary Add Country
 */
export const postRegionsRegionCountries = (
    id: string,
    postRegionsRegionCountriesBody: PostRegionsRegionCountriesBody,
 ) => {
      return customInstance<PostRegionsRegionCountries200>(
      {url: `/regions/${id}/countries`, method: 'post',
      headers: {'Content-Type': 'application/json'},
      data: postRegionsRegionCountriesBody
    },
      );
    }
  /**
 * Adds a Fulfillment Provider to a Region
 * @summary Add Fulfillment Provider
 */
export const postRegionsRegionFulfillmentProviders = (
    id: string,
    postRegionsRegionFulfillmentProvidersBody: PostRegionsRegionFulfillmentProvidersBody,
 ) => {
      return customInstance<PostRegionsRegionFulfillmentProviders200>(
      {url: `/regions/${id}/fulfillment-providers`, method: 'post',
      headers: {'Content-Type': 'application/json'},
      data: postRegionsRegionFulfillmentProvidersBody
    },
      );
    }
  /**
 * Adds a Payment Provider to a Region
 * @summary Add Payment Provider
 */
export const postRegionsRegionPaymentProviders = (
    id: string,
    postRegionsRegionPaymentProvidersBody: PostRegionsRegionPaymentProvidersBody,
 ) => {
      return customInstance<PostRegionsRegionPaymentProviders200>(
      {url: `/regions/${id}/payment-providers`, method: 'post',
      headers: {'Content-Type': 'application/json'},
      data: postRegionsRegionPaymentProvidersBody
    },
      );
    }
  /**
 * Creates a Region
 * @summary Create a Region
 */
export const postRegions = (
    postRegionsBody: PostRegionsBody,
 ) => {
      return customInstance<PostRegions200>(
      {url: `/regions`, method: 'post',
      headers: {'Content-Type': 'application/json'},
      data: postRegionsBody
    },
      );
    }
  /**
 * Retrieves a list of Regions.
 * @summary List Regions
 */
export const getRegions = (
    params?: GetRegionsParams,
 ) => {
      return customInstance<GetRegions200>(
      {url: `/regions`, method: 'get',
        params,
    },
      );
    }
  /**
 * Deletes a metadata key.
 * @summary Delete Metadata
 */
export const deleteRegionsRegionMetadataKey = (
    id: string,
    key: string,
 ) => {
      return customInstance<DeleteRegionsRegionMetadataKey200>(
      {url: `/regions/${id}/metadata/${key}`, method: 'delete'
    },
      );
    }
  /**
 * Deletes a Region.
 * @summary Delete a Region
 */
export const deleteRegionsRegion = (
    id: string,
 ) => {
      return customInstance<DeleteRegionsRegion200>(
      {url: `/regions/${id}`, method: 'delete'
    },
      );
    }
  /**
 * Retrieves a Region.
 * @summary Retrieve a Region
 */
export const getRegionsRegion = (
    id: string,
 ) => {
      return customInstance<GetRegionsRegion200>(
      {url: `/regions/${id}`, method: 'get'
    },
      );
    }
  /**
 * Updates a Region
 * @summary Update a Region
 */
export const postRegionsRegion = (
    id: string,
    postRegionsRegionBody: PostRegionsRegionBody,
 ) => {
      return customInstance<PostRegionsRegion200>(
      {url: `/regions/${id}`, method: 'post',
      headers: {'Content-Type': 'application/json'},
      data: postRegionsRegionBody
    },
      );
    }
  /**
 * Gathers all the fulfillment options available to in the Region.
 * @summary List Fulfillment Options available in the Region
 */
export const getRegionsRegionFulfillmentOptions = (
    id: string,
 ) => {
      return customInstance<GetRegionsRegionFulfillmentOptions200>(
      {url: `/regions/${id}/fulfillment-options`, method: 'get'
    },
      );
    }
  /**
 * Removes a Country from the list of Countries in a Region
 * @summary Remove Country
 */
export const postRegionsRegionCountriesCountry = (
    id: string,
    countryCode: string,
 ) => {
      return customInstance<PostRegionsRegionCountriesCountry200>(
      {url: `/regions/${id}/countries/${countryCode}`, method: 'delete'
    },
      );
    }
  /**
 * Removes a Fulfillment Provider.
 * @summary Remove Fulfillment Provider
 */
export const postRegionsRegionFulfillmentProvidersProvider = (
    id: string,
    providerId: string,
 ) => {
      return customInstance<PostRegionsRegionFulfillmentProvidersProvider200>(
      {url: `/regions/${id}/fulfillment-providers/${providerId}`, method: 'delete'
    },
      );
    }
  /**
 * Removes a Payment Provider.
 * @summary Remove Payment Provider
 */
export const postRegionsRegionPaymentProvidersProvider = (
    id: string,
    providerId: string,
 ) => {
      return customInstance<PostRegionsRegionPaymentProvidersProvider200>(
      {url: `/regions/${id}/payment-providers/${providerId}`, method: 'delete'
    },
      );
    }
  /**
 * Sets the metadata of a Region
 * @summary Set the metadata of a Region
 */
export const postRegionsRegionMetadata = (
    id: string,
    postRegionsRegionMetadataBody: PostRegionsRegionMetadataBody,
 ) => {
      return customInstance<PostRegionsRegionMetadata200>(
      {url: `/regions/${id}/metadata`, method: 'post',
      headers: {'Content-Type': 'application/json'},
      data: postRegionsRegionMetadataBody
    },
      );
    }
  
// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AsyncReturnType<
T extends (...args: any) => Promise<any>
> = T extends (...args: any) => Promise<infer R> ? R : any;

export type PostRegionsRegionCountriesResult = NonNullable<AsyncReturnType<typeof postRegionsRegionCountries>>
export type PostRegionsRegionFulfillmentProvidersResult = NonNullable<AsyncReturnType<typeof postRegionsRegionFulfillmentProviders>>
export type PostRegionsRegionPaymentProvidersResult = NonNullable<AsyncReturnType<typeof postRegionsRegionPaymentProviders>>
export type PostRegionsResult = NonNullable<AsyncReturnType<typeof postRegions>>
export type GetRegionsResult = NonNullable<AsyncReturnType<typeof getRegions>>
export type DeleteRegionsRegionMetadataKeyResult = NonNullable<AsyncReturnType<typeof deleteRegionsRegionMetadataKey>>
export type DeleteRegionsRegionResult = NonNullable<AsyncReturnType<typeof deleteRegionsRegion>>
export type GetRegionsRegionResult = NonNullable<AsyncReturnType<typeof getRegionsRegion>>
export type PostRegionsRegionResult = NonNullable<AsyncReturnType<typeof postRegionsRegion>>
export type GetRegionsRegionFulfillmentOptionsResult = NonNullable<AsyncReturnType<typeof getRegionsRegionFulfillmentOptions>>
export type PostRegionsRegionCountriesCountryResult = NonNullable<AsyncReturnType<typeof postRegionsRegionCountriesCountry>>
export type PostRegionsRegionFulfillmentProvidersProviderResult = NonNullable<AsyncReturnType<typeof postRegionsRegionFulfillmentProvidersProvider>>
export type PostRegionsRegionPaymentProvidersProviderResult = NonNullable<AsyncReturnType<typeof postRegionsRegionPaymentProvidersProvider>>
export type PostRegionsRegionMetadataResult = NonNullable<AsyncReturnType<typeof postRegionsRegionMetadata>>