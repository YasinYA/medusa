/**
 * Generated by orval v6.7.1 🍺
 * Do not edit manually.
 * Medusa Admin API
 * OpenAPI spec version: 1.0.0
 */
import {
  rest
} from 'msw'
import {
  faker
} from '@faker-js/faker'

export const getPostTaxRatesTaxRateProductTypesMock = () => ({tax_rate: faker.helpers.randomize([[...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({})), undefined])})

export const getDeleteTaxRatesTaxRateProductTypesMock = () => ({tax_rate: faker.helpers.randomize([[...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({})), undefined])})

export const getPostTaxRatesTaxRateProductsMock = () => ({tax_rate: faker.helpers.randomize([[...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({})), undefined])})

export const getDeleteTaxRatesTaxRateProductsMock = () => ({tax_rate: faker.helpers.randomize([[...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({})), undefined])})

export const getPostTaxRatesTaxRateShippingOptionsMock = () => ({tax_rate: faker.helpers.randomize([[...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({})), undefined])})

export const getDeleteTaxRatesTaxRateShippingOptionsMock = () => ({tax_rate: faker.helpers.randomize([[...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({})), undefined])})

export const getPostTaxRatesMock = () => ({tax_rate: faker.helpers.randomize([[...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({})), undefined])})

export const getDeleteTaxRatesTaxRateMock = () => ({id: faker.helpers.randomize([faker.random.word(), undefined]), object: faker.helpers.randomize([faker.random.word(), undefined]), deleted: faker.helpers.randomize([faker.datatype.boolean(), undefined])})

export const getGetTaxRatesTaxRateMock = () => ({tax_rate: faker.helpers.randomize([[...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({})), undefined])})

export const getPostTaxRatesTaxRateMock = () => ({tax_rate: faker.helpers.randomize([[...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({})), undefined])})

export const getTaxRatesMSW = () => [
rest.post('*/tax-rates/:id/product-types/batch', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getPostTaxRatesTaxRateProductTypesMock()),
        )
      }),rest.delete('*/tax-rates/:id/product-types/batch', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getDeleteTaxRatesTaxRateProductTypesMock()),
        )
      }),rest.post('*/tax-rates/:id/products/batch', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getPostTaxRatesTaxRateProductsMock()),
        )
      }),rest.delete('*/tax-rates/:id/products/batch', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getDeleteTaxRatesTaxRateProductsMock()),
        )
      }),rest.post('*/tax-rates/:id/shipping-options/batch', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getPostTaxRatesTaxRateShippingOptionsMock()),
        )
      }),rest.delete('*/tax-rates/:id/shipping-options/batch', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getDeleteTaxRatesTaxRateShippingOptionsMock()),
        )
      }),rest.post('*/tax-rates', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getPostTaxRatesMock()),
        )
      }),rest.delete('*/tax-rates/:id', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getDeleteTaxRatesTaxRateMock()),
        )
      }),rest.get('*/tax-rates/:id', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetTaxRatesTaxRateMock()),
        )
      }),rest.post('*/tax-rates/:id', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getPostTaxRatesTaxRateMock()),
        )
      }),]
